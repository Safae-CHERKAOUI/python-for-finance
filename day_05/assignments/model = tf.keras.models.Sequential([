model = tf.keras.models.Sequential([
  tf.keras.layers.LSTM(units = 32,
                       return_sequences=True,
                       input_shape=[input_width,1]), # [None,60,1] #[batch, time steps, dimension]

  tf.keras.layers.LSTM(units = 32,
                       return_sequences=False),

  tf.keras.layers.Dense(1),
  tf.keras.layers.Lambda(lambda x: x * 100.0)
])


optimizer = tf.keras.optimizers.Adam(learning_rate=1e-2)

model.compile(loss = "mse",
              metrics ="mae",
              optimizer = optimizer)


history = model.fit(X_train, Y_train,
                    validation_data=(X_val, Y_val),
                    verbose=1,
                    epochs=10)


results = model.evaluate(X_test, Y_test, verbose=0)
for name, value in zip(model.metrics_names, results):
  print(name, ': ', np.round(value,decimals=2))


test_predictions = model.predict(X_test) 
plot_time_series(Y_test,test_predictions)